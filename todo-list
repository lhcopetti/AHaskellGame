

21/12/2017
	OK! Add project name, e-mail and etc to stack.
	OK! Push project to GitHub
	OK! Add Velocity to the ball

22/12/2017
	OK! Improve main ball creation. Stop using those triangle patterns, maybe 
		it is time to fire up monad transformers?
	OK! Join the two different balls and keep the funcionality (bounded)

04/01/2018
	OK! Add a square that has the same behavior as the ball (collision).
	OK! Add another class (Squares?) that will have the same behavior (bounded and velocity), see what 
	holds still and what needs refactoring.

07/01/2018
	OK! Create type class for Position
	OK! Create type class for PhysicsBehavior
	OK! Create a method that bounds the object to a certain "box" using those type classes
	OK! Implement those type classes as instances for the Ball and Square data type
	OK! Simplify their update methods (duplicated logic)
	OK! Fix duplication on main loop function
	OK! Fix "Missing field in record construction button"

08/01/2018
	OK! Remove the manual handling of objects (Use the new AnyGameObject type)

09/01/2018
	OK! Create a new set of objects (Triangles, maybe?)
	OK! Create the Killable type class that represents game objects that die
		(This will be part of the GameObject primitive type class)

12/01/2018
	OK! Abstract the behavior away from the GameObject
	OK! Creation of the DrawingComponent
	OK! Add  tests for the MathFunction (signumWithoutZero)

13/01/2018
	OK! Fix the bug for the square that goes to the top but appears in the middle of the screen
		Bug in the workaround, probably. (Add tests)
	OK! Add a simple README stating where you are at, what are your goals (Component Driven Design),
		Steps on how to build, test, execute and debug. Maybe a little GIF showing an example?
	OK! Replicate all the behaviors from the other datatypes using the Ball.hs (Triangle.hs, Square.hs, etc)

15/01/2018
	OK! Create a physics component to update the velocity position automatically.
	OK! Add a routine to pollevents from the SFML until it receives none.
		(Flush, it may be this behavior that is making the closing behavior (mouse click) stall to execute

16/01/2018
	OK! Using the list monad, generate a lot of game objects by using all possible combinations
	between velocity, position, etc...
		I ended up using the <*> applicative operator instead
	OK! Add an option to create a agenerator from string (using the read)
		It is defined by a CPP Flag.
	OK! Print the seed used in the beginning of the program
		All seeds are printed by default now regardless of the generator (random or read from a string)
	OK! Add a compilation flag to control whether to use the random generated ones or the deterministic

17/01/2018
	-

18/01/2018
	OK! Implement game objects that have rotation. (Rotating triangle?)
		I prefered to use an hexagon.
	OK! Add a triangle that follows the mouse (one of the edges must be pointing towards the mouse at all times)
	OK! Add a drawing that contains text (font-size, color) (Add the game title to the screen?)

19/01/2018
	OK! Create behavior that after 100 updates will die.
	OK! Add a behavior that after colliding X times, the object dies
	OK! Create composite drawing components
		Maybe use the mouse following equilateral triangle. Add component(s) that will
		make it clear which edge is the "pointing" one.
	OK! Finally turn the Ball.hs into the GameObject.hs data type.
	OK! Create a sprite drawing, finally.

20/01/2018
	Moved type definitions to a single file.

21/01/2018
	OK! Create GameObject that show mouse position
	OK! Allow for gameobjects to have child objects

22/01/2018
	OK! Add behavior to create childs
	OK! Make another diary entry on the README

23/01/2018
	...
25/01/2018
	OK! (Simple) Input Component!
	
26/01/2018

11/02/2018
	OK! Isolate the Hipmunk library in its own package, there shouldn't have any imports 
	anywhere else in the code, meaning I have to wrap everything into my own types. I think 
	a top-level Hipmunk folder is the best way to go, instead of using a hidden nested foder.

12/02/2018
	OK! Add a drawing for the line segment.
	OK! Add debug draw for PhysicsObjects


	Destroy physics objects (remove from space)
	encloseByWrapAround should a physics version to actually update the underlying hipmunk library

	TODO: Add the Vec2Instances.hs to another module that also reexports the following:
		import SFML.System.Vec2 (Vec2f (..).



	TODO: Create a Scene object that will hold its own list of gameobjects
	TODO: Create a demo for switching between scenes



	TODO: All time counter (all of the game objects)
	TODO: Add a statistics object that will show:
		Composite drawing?
		current number of game objects
	TODO: Fix the following behavior when the target is too close. (Remove flickering).

	TODO: Add z-ordering to drawing components. Make the game title always appear on top.
	TODO: Make the mouse pointer (probably the triangle) turn itself into a ball when it is on top
	of the mouse cursor (or close enough).
	TODO: Create an abstraction for testing that uses tuples as (input, expected result)


	TODO: Add badge for automatic testing (haskell code, travis)
	TODO: Update the resolver to the latest one available (Currently 10.3)
	TODO: Add the Flyweight pattern for the sprites and textures.
		A single texture should  be resuable across all drawings.

	TODO: Create a gameobject that will follow the mouse upon clicking. It will stop as soons as it arrives
	close enough (5 radius?)

	TODO: Kill a specific type of game object after 'X' collisions 
		Use bound to dimension?
		Change color as the counter aproaches zero.
	TODO: Add acceleration to the PhysicsBehavior
	TODO: Destroy every SFML resource on program exit

	TODO: Change the name of the Position type class, it is no longer responsible for the posiion only, 
	it now hosts the rotation transform as well.
	
	TODO: Add acceleration behavior for the triangles
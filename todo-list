

21/12/2017
	OK! Add project name, e-mail and etc to stack.
	OK! Push project to GitHub
	OK! Add Velocity to the ball

22/12/2017
	OK! Improve main ball creation. Stop using those triangle patterns, maybe 
		it is time to fire up monad transformers?
	OK! Join the two different balls and keep the funcionality (bounded)

04/01/2018
	OK! Add a square that has the same behavior as the ball (collision).
	OK! Add another class (Squares?) that will have the same behavior (bounded and velocity), see what 
	holds still and what needs refactoring.

07/01/2018
	OK! Create type class for Position
	OK! Create type class for PhysicsBehavior
	OK! Create a method that bounds the object to a certain "box" using those type classes
	OK! Implement those type classes as instances for the Ball and Square data type
	OK! Simplify their update methods (duplicated logic)
	OK! Fix duplication on main loop function
	OK! Fix "Missing field in record construction button"

08/01/2018
	OK! Remove the manual handling of objects (Use the new AnyGameObject type)

09/01/2018
	OK! Create a new set of objects (Triangles, maybe?)
	OK! Create the Killable type class that represents game objects that die
		(This will be part of the GameObject primitive type class)

12/01/2018
	OK! Abstract the behavior away from the GameObject
	OK! Creation of the DrawingComponent
	OK! Add  tests for the MathFunction (signumWithoutZero)

13/01/2018
	OK! Fix the bug for the square that goes to the top but appears in the middle of the screen
		Bug in the workaround, probably. (Add tests)
	OK! Add a simple README stating where you are at, what are your goals (Component Driven Design),
		Steps on how to build, test, execute and debug. Maybe a little GIF showing an example?
	OK! Replicate all the behaviors from the other datatypes using the Ball.hs (Triangle.hs, Square.hs, etc)

	TODO: Finally turn the Ball.hs into the GameObject.hs data type.
	TODO: Using the list monad, generate a lot of game objects by using all possible combinations
	between velocity, position, etc...
	TODO: Print the seed used in the beginning of the program
	TODO: Add a compilation flag to control whether to use the random generated ones or the deterministic


	TODO: Add badge for automatic testing (haskell code, travis)
	TODO: Update the resolver to the latest one available (Currently 10.3)

	TODO: Create a gameobject that will follow the mouse upon clicking. It will stop as soons as it arrives
	close enough (5 radius?)

	TODO: Kill a specific type of game object after 'X' collisions 
		Use bound to dimension?
		Change color as the counter aproaches zero.
	TODO: Add acceleration to the PhysicsBehavior
	TODO: Destroy every SFML resource on program exit
	
	TODO: Add acceleration behavior for the triangles